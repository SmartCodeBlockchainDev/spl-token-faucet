{"version":3,"sources":["config/config.js","components/Utils/utils.js","components/Navbar/CheckBalance/index.js","components/Navbar/index.js","components/Footer/index.js","components/Utils/notify.js","components/Airdrop/index.js","App.js","reportWebVitals.js","index.js"],"names":["programID","PublicKey","dummyMintPk","GetProvider","wallet","network","opts","connection","Connection","Provider","CheckBalance","reload","balance","setBalance","solBalance","setSolBalance","useWallet","provider","publicKey","checkBalance","a","getParsedTokenAccountsByOwner","mint","parsedTokenAccountsByOwner","value","account","data","parsed","info","tokenAmount","uiAmount","console","log","getBalance","Math","round","useEffect","Button","variant","className","onClick","disabled","Navbar","tokenName","useSessionStorage","Footer","href","target","rel","useStyles","makeStyles","notification","display","alignItems","link","color","marginLeft","textDecoration","icon","fontSize","require","TOKEN_PROGRAM_ID","Token","ASSOCIATED_TOKEN_PROGRAM_ID","SystemProgram","web3","AirDrop","setReload","setNetwork","notify","styles","enqueueSnackbar","useSnackbar","clusterMap","useCallback","message","signature","cluster","Link","useNotify","useState","setSelectedOption","airdropPk","setAirdropPk","splAmount","setSplAmount","options","label","toString","handleSubmitSpl","event","preventDefault","airdropSplTokens","handleSubmitSol","requestAirdrop","LAMPORTS_PER_SOL","confirmTransaction","amount","mintPda","mintPdaBump","program","Program","idl","receiver","amountToAirdrop","BN","getAssociatedTokenAddress","associatedTokenAccount","rpc","airdrop","accounts","destination","payer","systemProgram","programId","tokenProgram","associatedTokenProgram","rent","SYSVAR_RENT_PUBKEY","signers","classNamePrefix","onChange","option","defaultValue","menuPlacement","menuPosition","isSearchable","theme","borderRadius","colors","primary","primary25","name","type","onFocus","step","App","useLocalStorage","autoConnect","search","window","location","URLSearchParams","get","wallets","useMemo","getPhantomWallet","getSolflareWallet","getMathWallet","getSolletWallet","ConnectionProvider","endpoint","WalletProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e195497.chunk.js","sourcesContent":["import { PublicKey } from '@solana/web3.js';\n\nexport const programID = new PublicKey('4sN8PnN2ki2W4TFXAfzR645FWs8nimmsYeNtxM8RBK6A');\nexport const dummyMintPk = new PublicKey('Gh9ZwEmdLJ8DscKNTkTqPbNwLNNBjuSzaG9Vp2KGtKJr');\nexport const dummyMintPkBump = 255;\n","import { Connection } from '@solana/web3.js';\nimport {\n  Program, Provider, utils, web3,\n} from '@project-serum/anchor';\nimport { programID } from '../../config/config';\n\nexport function GetProvider(wallet, network) {\n  const opts = {\n    preflightCommitment: 'processed',\n  };\n  const connection = new Connection(network, opts.preflightCommitment);\n  const provider = new Provider(\n    connection, wallet, opts.preflightCommitment,\n  );\n  return [provider, connection];\n}\n\n","import {Button} from '@material-ui/core';\nimport {useWallet} from '@solana/wallet-adapter-react';\nimport React, {FC, useEffect} from 'react';\nimport {GetProvider} from '../../Utils/utils';\nimport {dummyMintPk} from '../../../config/config.js';\n\nconst CheckBalance: FC = ({network, reload, balance, setBalance, solBalance, setSolBalance}) => {\n    const wallet = useWallet();\n    const [provider, connection] = GetProvider(wallet, network);\n    const publicKey = provider.wallet.publicKey;\n    const networkMap = {\n      'https://api.devnet.solana.com': 'DEVNET',\n      'https://api.testnet.solana.com': 'TESTNET',\n      'http://127.0.0.1:8899': 'LOCALNET'\n    }\n\n  useEffect(() => {\n    checkBalance();\n  }, [reload, wallet]);\n\n    async function checkBalance() {\n      try {\n        const parsedTokenAccountsByOwner = await connection.getParsedTokenAccountsByOwner(provider.wallet.publicKey, { mint: dummyMintPk });\n        balance = 1.0 * parsedTokenAccountsByOwner.value[0].account.data.parsed.info.tokenAmount.uiAmount;\n      } catch (err) {\n        console.log(err);\n        balance = 0;\n      }\n      try {\n        solBalance = await connection.getBalance(provider.wallet.publicKey);\n      } catch (err) {\n        console.log(err);\n        solBalance = 0;\n      }\n      setBalance(Math.round(balance * 100)/100);\n      setSolBalance(Math.round(((solBalance / 1000000000) * 100)/100));\n    }\n\n    return (\n        <Button variant=\"contained\" className=\"MuiButton-containedPrimary balance-button credix-button\" onClick={checkBalance} disabled={!publicKey} >\n            Check balance [{networkMap[network]}]\n        </Button>\n    );\n};\n\nexport default CheckBalance;\n","import React, {FC} from 'react';\nimport {WalletMultiButton} from '@solana/wallet-adapter-material-ui';\nimport CheckBalance from './CheckBalance';\nimport {useSessionStorage} from 'react-use';\nimport \"./style.scss\";\n\nconst Navbar: FC = ({tokenName, reload, network}) => {\n  const [balance, setBalance] = useSessionStorage('balance');\n  const [solBalance, setSolBalance] = useSessionStorage('balance');\n\n  return (\n    <div className=\"navbar-container\">\n      <div className=\"logo-and-tag-line\">\n        <span className=\"tag-line\">{tokenName}-TOKEN-FAUCET</span>\n      </div>\n      <div className=\"balance-wallet-container\">\n        <WalletMultiButton className=\"navbar-button credix-button\" />\n        <CheckBalance reload={reload} balance={balance} setBalance={setBalance} solBalance={solBalance} setSolBalance={setSolBalance} network={network} className=\"navbar-button\" />\n        <div>\n          <div className=\"balance-and-pk\">\n            <h1>Balance: {solBalance} SOL, {balance} {tokenName}</h1>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Navbar;\n","import \"./style.scss\";\n\nconst Footer: FC = () => {\n  return (\n    <div>\n      <div className=\"footer footer-left\">\n          <a href=\"https://github.com/credix-finance/spl-token-faucet\" target=\"_blank\" rel=\"noreferrer\">GitHub</a>\n      </div>\n      <div className=\"footer footer-right\">\n        <a href=\"https://credix.finance\" target=\"_blank\" rel=\"noreferrer\">made with ❤ by credix.finance</a>\n      </div>\n    </div>\n  );\n}\n\nexport default Footer;\n","import {Link, makeStyles} from '@material-ui/core';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport {useSnackbar, VariantType} from 'notistack';\nimport React, {useCallback} from 'react';\n\nconst useStyles = makeStyles({\n    notification: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    link: {\n        color: '#ffffff',\n        display: 'flex',\n        alignItems: 'center',\n        marginLeft: 16,\n        textDecoration: 'underline',\n        '&:hover': {\n            color: '#000000',\n        },\n    },\n    icon: {\n        fontSize: 20,\n        marginLeft: 8,\n    },\n});\n\nexport function useNotify() {\n    const styles = useStyles();\n    const { enqueueSnackbar } = useSnackbar();\n    const clusterMap = {\n      \"https://api.devnet.solana.com\": \"devnet\",\n      \"https://api.testnet.solana.com\": \"testnet\"\n    }\n\n    return useCallback(\n        (variant: VariantType, message: string, signature?: string, cluster?: string) => {\n            enqueueSnackbar(\n                <span className={styles.notification}>\n                    {message}\n                    {signature && (\n                        <Link\n                            className={styles.link}\n                            href={`https://explorer.solana.com/tx/${signature}?cluster=${clusterMap[cluster]}`}\n                            target=\"_blank\"\n                        >\n                            Transaction\n                            <LaunchIcon className={styles.icon} />\n                        </Link>\n                    )}\n                </span>,\n                { variant }\n            );\n        },\n        [enqueueSnackbar, styles]\n    );\n}\n","import {Button} from \"@material-ui/core\";\nimport { LAMPORTS_PER_SOL, TransactionSignature, PublicKey } from '@solana/web3.js';\nconst { TOKEN_PROGRAM_ID, Token, ASSOCIATED_TOKEN_PROGRAM_ID } = require(\"@solana/spl-token\");\nimport {useWallet} from '@solana/wallet-adapter-react';\nimport {BN, Program, utils, web3} from '@project-serum/anchor';\nconst { SystemProgram } = web3;\nimport {useNotify} from '../Utils/notify';\nimport Select from 'react-select';\nimport React, {FC, useState, useEffect} from 'react';\nimport {GetProvider} from '../Utils/utils';\nimport {programID, dummyMintPk, dummyMintPkBump} from '../../config/config.js';\nimport idl from '../../config/spl_token_faucet.json';\n\nimport \"./style.scss\";\n\nconst AirDrop: FC = ({tokenName, reload, setReload, network, setNetwork}) => {\n  const wallet = useWallet();\n  const notify = useNotify();\n  const [provider, connection] = GetProvider(wallet, network);\n  const publicKey = provider.wallet.publicKey;\n  const [selectedOption, setSelectedOption] = useState(\"https://api.devnet.solana.com\");\n  const [airdropPk, setAirdropPk] = useState(\"CONNECT WALLET\");\n  const [splAmount, setSplAmount] = useState(1000);\n  const options = [\n    { value: 'https://api.devnet.solana.com', label: 'DEVNET' },\n    { value: 'https://api.testnet.solana.com', label: 'TESTNET' },\n    { value: 'http://127.0.0.1:8899', label: 'LOCALNET' }\n  ]\n\n  useEffect(() => {\n    if(wallet.publicKey) {\n        setAirdropPk(wallet.publicKey.toString()); \n    }\n  }, [wallet.publicKey]);\n\n  const handleChange = (option) => {\n    setSelectedOption(option);\n    setNetwork(option.value);\n    setReload(!reload);\n  };\n\n  const handleChangeSplAmount = (event) => {\n    setSplAmount(event.target.value);\n  }\n\n  const handleChangeAirdropPk = (event) => {\n    setAirdropPk(event.target.value);\n  };\n\n  const handleFocusAirdropPk = (event) => {\n    setAirdropPk(\"\");\n  }\n\n  const handleSubmitSpl = async (event) => {\n    event.preventDefault();\n    await airdropSplTokens(splAmount, dummyMintPk, dummyMintPkBump);\n  };\n\n  const handleSubmitSol = async (event) => {\n    const [provider, connection] = GetProvider(wallet, network);\n    let signature = '';\n    try { \n      signature = await connection.requestAirdrop(new PublicKey(airdropPk), LAMPORTS_PER_SOL);\n      notify('info', 'SOL airdrop requested:', signature, network);\n      await connection.confirmTransaction(signature, 'processed');\n      notify('success', 'SOL airdrop successful!', signature, network);\n      setReload(!reload);\n    } catch (err) {\n      notify('error', `Airdrop failed! ${err?.message}`, signature, network);\n    }\n  };\n\n  async function airdropSplTokens(amount, mintPda, mintPdaBump) {\n    let signature = '';\n    try {\n      const [provider, connection] = GetProvider(wallet, network);\n      const program = new Program(idl, programID, provider);\n      const receiver = new PublicKey(airdropPk);\n      let amountToAirdrop = new BN(amount * 1000000);\n\n      let associatedTokenAccount = await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        mintPda,\n        receiver,\n        true\n      );\n\n      signature = await program.rpc.airdrop(\n        mintPdaBump,\n        amountToAirdrop,\n        {\n          accounts: {\n            mint: mintPda,\n            destination: associatedTokenAccount,\n            payer: provider.wallet.publicKey,\n            receiver: receiver, \n            systemProgram: SystemProgram.programId,\n            tokenProgram: TOKEN_PROGRAM_ID,\n            associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n            rent: web3.SYSVAR_RENT_PUBKEY\n          },\n          signers: [],\n        }\n      );\n      notify('info', `${tokenName} Airdrop requested:`, signature, network);\n      await connection.confirmTransaction(signature, 'processed');\n      notify('success', `${tokenName} Airdrop successful!`, signature, network);\n      setReload(!reload);\n    } catch (err) {\n      notify('error', `${tokenName} Airdrop failed! ${err?.message}`, signature, network);\n    }\n  }\n\n  return (\n    <div className=\"airdrop-container\">\n      <div className=\"airdrop-wrapper\">\n        <h3>Network selection</h3>\n        <div className=\"network-dropdown-wrapper\">\n          <Select\n            className=\"network-dropdown navbar-button react-select-container\"\n            classNamePrefix=\"react-select\"\n            onChange={handleChange}\n            defaultValue={options[0]}\n            options={options}\n            menuPlacement=\"auto\"\n            menuPosition=\"fixed\"\n            isSearchable={false}\n            theme={(theme) => ({\n              ...theme,\n              borderRadius: 0,\n              colors: {\n                ...theme.colors,\n                primary: 'black',\n                primary25: \"#f0f0f0\"\n              },\n            })}\n           />\n         </div>\n        <h3>Address for airdrop</h3>\n        <p>The address the SOL and {tokenName} will be sent to.</p>\n        <input\n          name=\"airdropPk\"\n          type=\"text\"\n          value={airdropPk}\n          onChange={handleChangeAirdropPk}\n          onFocus={handleFocusAirdropPk}\n          disabled={!publicKey}\n          className=\"airdrop-pk-input stake-input borrower-pk credix-button MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary balance-button\"\n        />\n        <h3>SOL airdrop</h3>\n        <p>Receive 1 SOL; you will need this to pay for transaction fees.</p>\n        <Button\n            variant=\"contained\"\n            className=\"stake-submit MuiButton-containedPrimary balance-button credix-button sol-airdrop\"\n            onClick={handleSubmitSol}\n            disabled={!publicKey}\n        >\n         GET 1 SOL\n        </Button>\n        <h3>{tokenName} airdrop</h3>\n        <p>Receive dummy SPL tokens, always coming from the same mint.</p>\n        <p>Mint PK: Gh9ZwEmdLJ8DscKNTkTqPbNwLNNBjuSzaG9Vp2KGtKJr</p>\n         <form className=\"form-row\">\n           <input\n             onChange={handleChangeSplAmount}\n             defaultValue={1000}\n             type=\"number\"\n             step=\"100\"\n             disabled={!publicKey}\n             className=\"navbar-button stake-input credix-button MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary balance-button\"\n            />\n            <Button\n                variant=\"contained\"\n                className=\"stake-submit MuiButton-containedPrimary balance-button credix-button\"\n                onClick={handleSubmitSpl}\n                disabled={!publicKey}\n            >\n             GET {tokenName}\n            </Button>\n         </form>\n         <h3>Customize this faucet</h3>\n         <p>Give DUMMY a different name: <a href=\"https://spl-token-faucet.com?token-name=USDC\" target=\"_blank\">spl-token-faucet.com?token-name=USDC</a></p>\n       </div>\n    </div>\n  );\n};\n\nexport default AirDrop;\n","import React, { FC, useMemo, useState } from 'react';\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\nimport { ConnectionProvider, useLocalStorage, WalletProvider } from '@solana/wallet-adapter-react';\nimport { getMathWallet, getPhantomWallet, getSolflareWallet, getSolletWallet } from '@solana/wallet-adapter-wallets';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Navbar from './components/Navbar';\nimport Footer from './components/Footer';\nimport AirDrop from './components/Airdrop';\n\nconst App: FC = () => {\n  const [network, setNetwork] = useState(\"https://api.devnet.solana.com\");\n  const [reload, setReload] = useState(true);\n  const [autoConnect, _setAutoConnect] = useLocalStorage('autoConnect', false);\n  const search = window.location.search;\n  const params = new URLSearchParams(search);\n  let tokenName = params.get('token-name');\n  if (!tokenName) { tokenName = \"DUMMY\"; }\n\n  const wallets = useMemo(\n        () => [\n            getPhantomWallet(),\n            getSolflareWallet(),\n            getMathWallet(),\n            getSolletWallet()\n        ],\n        []\n      );\n\n  return (\n    <ConnectionProvider endpoint={network}>\n      <WalletProvider wallets={wallets} autoConnect={autoConnect}>\n        <WalletDialogProvider>\n          <Router>\n            <Navbar tokenName={tokenName} reload={reload} network={network} />\n            <AirDrop tokenName={tokenName} reload={reload} setReload={setReload} network={network} setNetwork={setNetwork} />\n            <Footer />\n          </Router>\n        </WalletDialogProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { SnackbarProvider } from 'notistack';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SnackbarProvider>\n      <App />\n    </SnackbarProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}